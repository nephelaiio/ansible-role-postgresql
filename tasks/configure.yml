---
- name: Manage Debian locale
  community.general.locale_gen:
    name: "{{ postgresql_locale }}"
    state: present
  when: ansible_os_family == 'Debian'
  notify: postgresql_restart

- name: Manage RedHat locale
  when: ansible_os_family == 'RedHat'
  block:
    - name: Query available locale
      ansible.builtin.command: localectl list-locales
      changed_when: false
      register: _locale_query_list

    - name: Query configured locale
      ansible.builtin.command: localectl status
      changed_when: false
      register: _locale_query_config

    - name: Check requested locale
      ansible.builtin.assert:
        that: postgresql_locale in _locale_query_list.stdout_lines

    - name: Set locale configuration facts
      ansible.builtin.set_fact:
        _locale_config: "{{ _locale_query_config | regex_search('LANG=([^\n]+)', '\\1') | first }}"

    - name: Configure locale
      ansible.builtin.command:
        cmd: localectl set-locale LANG={{ postgresql_locale }}
      when: postgresql_locale != _locale_config
      changed_when: postgresql_locale != _locale_config

- name: Create PostgreSQL data directory
  ansible.builtin.file:
    path: "{{ _postgresql_datadir }}"
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
    state: directory
    mode: 0700

- name: Initialize PostgreSQL database
  ansible.builtin.command:
    cmd: "{{ _postgresql_bindir }}/initdb -D {{ _postgresql_datadir }}"
    creates: "{{ _postgresql_datadir }}/PG_VERSION"
  become: true
  become_user: "{{ postgresql_user }}"

- name: Create PostgreSQL include directory
  ansible.builtin.file:
    path: "{{ _postgresql_conf_include }}"
    state: directory
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
    mode: 0755

- name: Manage PostgreSQL ansible include config
  ansible.builtin.copy:
    dest: "{{ _postgresql_conf_ansible }}"
    content: "{{ postgresql_conf_ansible }}"
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
    mode: 0644
  when: postgresql_conf_ansible is defined
  notify: postgresql_reload

- name: Destroy PostgreSQL ansible include config
  ansible.builtin.file:
    path: "{{ _postgresql_conf_ansible }}"
    state: absent
  when: postgresql_conf_ansible is not defined
  notify: postgresql_reload

- name: Create PostgreSQL local config
  ansible.builtin.file:
    path: "{{ _postgresql_conf_local }}"
    state: touch
    modification_time: preserve
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
    mode: 0644

- name: Create PostgreSQL standby config
  ansible.builtin.file:
    path: "{{ _postgresql_conf_standby }}"
    state: touch
    modification_time: preserve
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
    mode: 0644

- name: Manage PostgreSQL hba config
  community.postgresql.postgresql_pg_hba:
    dest: "{{ _postgresql_conf_hba }}"
    contype: "{{ item.type }}"
    databases: "{{ item.databases }}"
    users: "{{ item.users }}"
    source: "{{ item.address | default(omit) }}"
    method: "{{ item.method }}"
    create: "{{ postgresql_hba_manage | default(true) }}"
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
  loop: "{{ postgresql_hba_entries }}"
  loop_control:
    label: "{{ item.type }} {{ item.databases }} {{ item.users }} {{ item.method }}"
  notify: postgresql_reload

- name: Manage PostgreSQL main config
  ansible.builtin.template:
    src: postgres.conf.j2
    dest: "{{ _postgresql_conf_main }}"
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
    backup: true
    mode: 0644
  notify: postgresql_restart

- name: List PostgreSQL alien config files
  ansible.builtin.find:
    path: "{{ _postgresql_conf_include }}"
    exclude: "{{ _postgresql_conf_exclude }}"
    recurse: false
  register: _query_includes

- name: Drop PostgreSQL alien config files
  ansible.builtin.file:
    path: "{{ item }}"
  loop: "{{ _query_includes.files | map(attribute='path') }}"

- name: Manage PostgreSQL service configuration
  when: ansible_os_family == 'RedHat'
  block:
    - name: Set system facts
      ansible.builtin.set_fact:
        _postgresql_dropin: "/etc/systemd/system/{{ _postgresql_service_name }}.service.d/pgdata.conf"

    - name: Create systemd drop-in directory
      ansible.builtin.file:
        path: "{{ _postgresql_dropin | dirname }}"
        owner: root
        group: root
        state: directory
        mode: 0755

    - name: Create systemd drop-in configuration
      ansible.builtin.copy:
        dest: "{{ _postgresql_dropin }}"
        content: |
          [Service]
          Environment=PGDATA={{ _postgresql_datadir }}
        owner: root
        group: root
        mode: 0644
      notify: daemon_reload
