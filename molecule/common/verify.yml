---
- name: Verify
  hosts: all
  gather_facts: true
  become: true
  tasks:
    - name: Gather service facts
      ansible.builtin.service_facts:

    - name: Gather package facts
      ansible.builtin.package_facts:

    - name: Set yum package facts
      ansible.builtin.set_fact:
        postgresql_server_packages: "{{ packages.keys() | select('match', '^postgresql[0-9]+-server$') }}"
        postgresql_client_packages: "{{ packages.keys() | select('match', '^postgresql[0-9]+$') }}"
      when: ansible_os_family == 'RedHat'

    - name: Set apt package facts
      ansible.builtin.set_fact:
        postgresql_server_packages: "{{ packages.keys() | select('match', '^postgresql-[0-9]+$') }}"
        postgresql_client_packages: "{{ packages.keys() | select('match', '^postgresql-client-[0-9]+$') }}"
      when: ansible_os_family == 'Debian'

    - name: Verify packages
      block:
        - name: Verify deployed packages
          ansible.builtin.assert:
            that:
              - postgresql_server_packages | length == 1
              - postgresql_client_packages | length == 1

      rescue:
        - name: Debug server package list
          ansible.builtin.debug:
            var: postgresql_server_packages

        - name: Debug client package list
          ansible.builtin.debug:
            var: postgresql_client_packages

        - name: Fail verification
          ansible.builtin.fail:

    - name: Set yum service facts
      ansible.builtin.set_fact:
        postgresql_service_release: "{{ _release }}"
        postgresql_service: "{{ _service }}"
      vars:
        _packages: "{{ postgresql_server_packages }}"
        _release: "{{ _packages | first | regex_replace('^postgresql([0-9]+)-server', '\\1') }}"
        _name: "postgresql-{{ _release }}.service"
        _service: "{{ [_name] | map('extract', services) }}"
      when: ansible_os_family == 'RedHat'

    - name: Set yum service facts
      ansible.builtin.set_fact:
        postgresql_service_release: "{{ _release }}"
        postgresql_service: "{{ _service }}"
      vars:
        _release: "{{ postgresql_server_packages | first | regex_replace('^postgresql-', '') }}"
        _name: "postgresql@{{ _release }}-main.service"
        _service: "{{ [_name] | map('extract', services) }}"
      when: ansible_os_family == 'Debian'

    - name: Verify service state
      ansible.builtin.assert:
        that:
          - postgresql_service | length == 1
          - (postgresql_service | first).state == _svc_state
          - (postgresql_service | first).status == _svc_status
      vars:
        _state: "{{ postgresql_service_state | default('running') }}"
        _online: "{{ (ansible_os_family == 'RedHat') | ternary('enabled', 'active') }}"
        _offline: "{{ (ansible_os_family == 'RedHat') | ternary('disabled', 'inactive')  }}"
        _status: "{{ (_state == 'running') | ternary(_online, _offline) }}"
        _masked: "{{ postgresql_service_masked | default('false') | bool }}"
        _svc_status: "{{ _masked | ternary('masked', _status) }}"
        _stopped: "{{ (ansible_os_family == 'RedHat') | ternary('inactive', 'stopped') }}"
        _svc_state: "{{ (_state == 'running') | ternary('running', _stopped) }}"

    - name: Stop verification for install-only scenarios
      ansible.builtin.meta: end_play
      when: (postgresql_service | first).state != 'running'

    - name: Gather postgresql info
      community.postgresql.postgresql_info:
        filter:
          - "databases"
          - "roles"
      become: true
      become_user: postgres
      register: postgresql_info

    - name: Verify requested databases
      ansible.builtin.assert:
        that: _missing_dbs | length == 0
        fail_msg: |
          Unable to find databases [{{ _requested_dbs | join(',') }}] on server.
          Existing DBs are [{{ _existing_dbs | join(',') }}]
      vars:
        _existing_dbs: "{{ postgresql_info.databases | dict2items | map(attribute='key') }}"
        _requested_dbs: "{{ postgresql_databases | default([]) | map(attribute='name') }}"
        _missing_dbs: "{{ _requested_dbs | reject('in', _existing_dbs) }}"

    - name: Verify requested roles
      ansible.builtin.assert:
        that: _missing_roles | length == 0
        fail_msg: |
          Unable to find roles [{{ _missing_roles | join(',') }}] on server
          Existing roles are [{{ _existing_roles | join(',') }}]
      vars:
        _existing_roles: "{{ postgresql_info.roles | dict2items | map(attribute='key') }}"
        _requested_roles: "{{ postgresql_roles | default([]) | map(attribute='name') }}"
        _missing_roles: "{{ _requested_roles | reject('in', _existing_roles) }}"

    - name: Verify user groups
      ansible.builtin.assert:
        that: item.groups | rejectattr('name', 'in', _role_groups) | length == 0
        fail_msg: "Role {{ item.name }} is not a member of groups [{{ _role_groups | join(',') }}]"
      vars:
        _existing_roles: "{{ postgresql_info.roles | dict2items }}"
        _role_groups: "{{ _existing_roles | rejectattr('value.canlogin') | map(attribute='key') }}"
      loop_control:
        label: "{{ item.name }}"
      loop: "{{ postgresql_roles | default([]) | selectattr('groups', 'defined') }}"

    - name: Query registered extensions
      community.postgresql.postgresql_query:
        query: "SELECT extname FROM pg_extension"
        db: postgres
      become: true
      become_user: postgres
      register: _extension_query

    - name: Set extension facts
      ansible.builtin.set_fact:
        _registered_extensions: "{{ _registered }}"
        _missing_extensions: "{{ _missing }}"
      vars:
        _registered: "{{ _extension_query.query_result | map(attribute='extname') }}"
        _expected:
          - pgaudit
          - pg_cron
          - pg_stat_statements
        _missing: "{{ _expected | difference(_registered) }}"

    - name: Verify registered extensions
      block:
        - name: Check registrations
          ansible.builtin.assert:
            that: _missing_extensions | length == 0

      rescue:
        - name: Debug failed extensions
          ansible.builtin.fail:
            msg: "Unable to find extensions [{{ ', '.join(_missing_extensions) }}]"
