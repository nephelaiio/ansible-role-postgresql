---
- name: Verify postgresql

  gather_facts: false

  hosts: all

  tasks:

    - name: Gather postgresql info
      community.postgresql.postgresql_info:
        filter:
          - "databases"
          - "roles"
      become: true
      become_user: "{{ postgresql_user }}"
      register: postgresql_info

    - name: Check if databases exist
      ansible.builtin.fail:
        msg: "Unable to find databases {{ _configured_dbs | join(',') }} in existing dbs list: {{ _existing_dbs | join(',') }}"
      vars:
        _existing_dbs: "{{ postgresql_info.databases | dict2items | map(attribute='key') }}"
        _configured_dbs: "{{ postgresql_databases | map(attribute='name') }}"
      when: _configured_dbs | reject('in', _existing_dbs)

    - name: Check if roles exist
      ansible.builtin.fail:
        msg: "Unable to find roles {{ _missing_roles | join(',') }} in existing roles list: {{ _existing_roles | join(',') }}"
      vars:
        _existing_roles: "{{ postgresql_info.roles | dict2items | map(attribute='key') }}"
        _configured_roles: "{{ postgresql_roles | map(attribute='name') }}"
        _missing_roles: "{{ _configured_roles | reject('in', _existing_roles) }}"
      when: _missing_roles | length > 0

    - name: Check role memberships
      ansible.builtin.fail:
        msg: "Unable to find role {{ item.name }} as member of exsting groups: {{ _role_groups | join(',') }}"
      vars:
        _existing_roles: "{{ postgresql_info.roles | dict2items }}"
        _role_groups: "{{ _existing_roles | rejectattr('value.canlogin') | map(attribute='key') }}"
      loop: "{{ postgresql_roles }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - item.groups is defined
        - item.groups | rejectattr('name', 'in', _role_groups)
